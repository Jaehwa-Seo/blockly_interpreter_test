<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>blockly_interpreter_test</title>
</head>

<body mode="maker">

    <main>
        <div style="float:left; width:50%;height:1000px">
        <div id="blocklyDiv" style="height: 100%; width: 100%;"></div>
        </div>
        <div style="float:left; width:50%">
        <button onclick="printCode()">print code</button>
        <button onclick="stepCode()" id="stepButton">Step JavaScript</button>
        scene
        </div>
    </main>

    <script src="https://unpkg.com/blockly/blockly.min.js"></script>
    <script src="https://unpkg.com/blockly"></script>
    <script src="https://unpkg.com/blockly/javascript_compressed"></script>
    <script src="/assets/js/acorn_interpreter.js"></script>

    <xml id="toolbox" style="display: none">
        <category name="Control">
        <block type="controls_repeat"></block>
        <block type="run_block"></block>
        <block type="jump_block"></block>
        <block type="set_value"></block>
        </category>
    </xml>

</body>
<script>
    /**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Shared toolbox for JS-Interpreter demos.
 */




var toolboxJson = {
  "contents": [
    {
      "kind": "CATEGORY",
      "name": "Logic",
      "colour": "%{BKY_LOGIC_HUE}",
      "contents": [
        {
          "kind": "BLOCK",
          "type": "controls_if"
        },
        {
          "kind": "BLOCK",
          "type": "logic_compare"
        },
        {
          "kind": "BLOCK",
          "type": "logic_operation"
        },
        {
          "kind": "BLOCK",
          "type": "logic_negate"
        },
        {
          "kind": "BLOCK",
          "type": "logic_boolean"
        }
      ]
    },
    {
      "kind": "CATEGORY",
      "name": "Loops",
      "colour": "%{BKY_LOOPS_HUE}",
      "contents": [
        {
          "kind": "BLOCK",
          "type": "controls_repeat_ext",
          "inputs": {
            "TIMES": {
              "shadow": {
                "type": "math_number",
                "fields": {"NUM": 10}
              }
            }
          }
        },
        {
          "kind": "BLOCK",
          "type": "controls_whileUntil"
        }
      ]
    },
    {
      "kind": "CATEGORY",
      "name": "Math",
      "colour": "%{BKY_MATH_HUE}",
      "contents": [
        {
          "kind": "BLOCK",
          "type": "math_number"
        },
        {
          "kind": "BLOCK",
          "type": "math_arithmetic",
          "inputs": {
            "A": {
              "shadow": {
                "type": "math_number",
                "fields": {"NUM": 1}
              }
            },
            "B": {
              "shadow": {
                "type": "math_number",
                "fields": {"NUM": 1}
              }
            }
          }
        },
        {
          "kind": "BLOCK",
          "type": "math_single",
          "inputs": {
            "NUM": {
              "shadow": {
                "type": "math_number",
                "fields": {"NUM": 9}
              }
            }
          }
        }
      ]
    },
    {
      "kind": "CATEGORY",
      "name": "Text",
      "colour": "%{BKY_TEXTS_HUE}",
      "contents": [
        {
          "kind": "BLOCK",
          "type": "text"
        },
        {
          "kind": "BLOCK",
          "type": "text_length",
          "inputs": {
            "VALUE": {
              "shadow": {
                "type": "text",
                "fields": {"TEXT": "abc"}
              }
            }
          }
        },
        {
          "kind": "BLOCK",
          "type": "text_print",
          "inputs": {
            "TEXT": {
              "shadow": {
                "type": "text",
                "fields": {"TEXT": "abc"}
              }
            }
          }
        },
        {
          "kind": "BLOCK",
          "type": "text_prompt_ext",
          "inputs": {
            "TEXT": {
              "shadow": {
                "type": "text",
                "fields": {"TEXT": "abc"}
              }
            }
          }
        }
      ]
    },
    {
      "kind": "SEP"
    },
    {
      "kind": "CATEGORY",
      "name": "Variables",
      "custom": "VARIABLE",
      "colour": "%{BKY_VARIABLES_HUE}",
    },
    {
      "kind": "CATEGORY",
      "name": "Functions",
      "custom": "PROCEDURE",
      "colour": "%{BKY_PROCEDURES_HUE}",
    }
  ]
};
const startBlocks = {
      "blocks": {
        "blocks": [
          {
            "type": "variables_set",
            "x": 20,
            "y": 20,
            "inline": true,
            "fields": {
              "VAR": {"id": "n"}
            },
            "inputs": {
              "VALUE": {
                "block": {
                  "type": "math_number",
                  "fields": {"NUM": 1}
                }
              }
            },
            "next": {
              "block": {
                "type": "controls_repeat_ext",
                "inline": true,
                "inputs": {
                  "TIMES": {
                    "block": {
                      "type": "math_number",
                      "fields": {"NUM": 4}
                    }
                  },
                  "DO": {
                    "block": {
                      "type": "variables_set",
                      "inline": true,
                      "fields": {
                        "VAR": {"id": "n"}
                      },
                      "inputs": {
                        "VALUE": {
                          "block": {
                            "type": "math_arithmetic",
                            "fields": {"OP": "MULTIPLY"},
                            "inputs": {
                              "A": {
                                "block": {
                                  "type": "variables_get",
                                  "fields": {
                                    "VAR": {"id": "n"}
                                  }
                                }
                              },
                              "B": {
                                "block": {
                                  "type": "math_number",
                                  "fields": {"NUM": 2}
                                }
                              }
                            }
                          }
                        }
                      },
                      "next": {
                        "block": {
                          "type": "text_print",
                          "inputs": {
                            "TEXT": {
                              "block": {
                                "type": "variables_get",
                                "fields": {
                                  "VAR": {"id": "n"}
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "variables": [
        {
          "name": "n",
          "id": "n"
        }
      ]
    };

</script>

<script>
    var workspace = Blockly.inject('blocklyDiv', {toolbox:toolboxJson});
    

    Blockly.JavaScript.STATEMENT_PREFIX = 'highlightBlock(%1);\n';
    Blockly.JavaScript.addReservedWords('highlightBlock');

    Blockly.serialization.workspaces.load(startBlocks, workspace)
    function initApi(interpreter, globalObject) {
        // Add an API function for the alert() block.
        var wrapper = function(text) {
            return alert(arguments.length ? text : '');
        };
        interpreter.setProperty(globalObject, 'alert',
            interpreter.createNativeFunction(wrapper));

        // Add an API function for the prompt() block.
        wrapper = function(text) {
            return prompt(text);
        };
        interpreter.setProperty(globalObject, 'prompt',
            interpreter.createNativeFunction(wrapper));

        const wrapperHighlight = function(id) {
            id = String(id || '');
            return highlightBlock(id);
        };
        interpreter.setProperty(globalObject, 'highlightBlock',
        interpreter.createNativeFunction(wrapperHighlight));
    }

    let highlightPause = false;

    function highlightBlock(id) {
        highlightPause = true;
        workspace.highlightBlock(id);
    }

    var myInterpreter;
    
    function printCode()
    {
        // Infinite loop block code
        window.LoopTrap = 1000;
        Blockly.JavaScript.INFINITE_LOOP_TRAP = 'if(--window.LoopTrap == 0) throw "Infinite loop.";\n';
        const jsCode = Blockly.JavaScript.workspaceToCode(workspace);
        var myInterpreter = new Interpreter(jsCode,initApi);
        myInterpreter.run();
        console.log(jsCode)
    }

    

    

    function resetStepUi(clearOutput) {
        workspace.highlightBlock(null);
        highlightPause = false;
        myInterpreter = null;
    }

    function stepCode() {
      if (!myInterpreter) {
        // First statement of this code.
        // Clear the program output.
        resetStepUi(true);
        const latestCode = Blockly.JavaScript.workspaceToCode(workspace);
        myInterpreter = new Interpreter(latestCode, initApi);

        // And then show generated code in an alert.
        // In a timeout to allow the outputArea.value to reset first.
        console.log(latestCode)
        setTimeout(function() {
          alert('Ready to execute the following code\n' +
              '===================================\n' + latestCode);
          highlightPause = true;
          stepCode();
        }, 1);
        return;
      }

      highlightPause = false;
      let hasMoreCode;

      do {
        try {
          hasMoreCode = myInterpreter.step();
        } finally {
          if (!hasMoreCode) {
            // Program complete, no more code to execute.
            resetStepUi(false);
            // Cool down, to discourage accidentally restarting the program.
            stepButton.disabled = 'disabled';
            setTimeout(function() {
              stepButton.disabled = '';
            }, 2000);

            return;
          }
        }
        // Keep executing until a highlight statement is reached,
        // or the code completes or errors.
      } while (hasMoreCode && !highlightPause);
    }
</script>

<script>
    
    Blockly.Blocks['set_value'] = {
        init: function() {
            this.appendDummyInput()
            .appendField("Set Value")
            this.setColour(216);
            this.setPreviousStatement(true);
            this.setNextStatement(true);
        }
    };

    Blockly.JavaScript['set_value'] = function(block) {
        var code = "var a = 1;\n"
        return code;
    };

    Blockly.Blocks['run_block'] = {
        init: function() {
            this.appendDummyInput()
            .appendField("RUN")
            this.setColour(216);
            this.setPreviousStatement(true);
            this.setNextStatement(true);
        }
    };

    Blockly.JavaScript['run_block'] = function(block) {
        var code = "a = a + 1;\n"
        return code;
    };

    Blockly.Blocks['jump_block'] = {
        init: function() {
            this.appendDummyInput()
            .appendField("JUMP")
            this.setColour(18);
            this.setPreviousStatement(true);
            this.setNextStatement(true);
        }
    };


    Blockly.JavaScript['jump_block'] = function(block) {
        var code = "alert(a);\n"
        return code;
    };

</script>
</html>